// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

exports.ChannelType = {
  UnknownChannel: 0,
  NamedPipes: 1,
  WebSocket: 2,
  LongPoll: 3,
  AzureServiceBus: 4,
  Isomorphic: 5
}

exports.ServiceType = {
  UnknownService: 0,
  Dal: 1,
  ObsoleteListener: 2,
  Servicer: 3,
  Receiver: 4,
  Monitor: 5,
  Processor: 6,
  CryptoCache: 7,
  Broker: 8,
  AppManager: 9,
  Updater: 10
}

var Connection = exports.Connection = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineConnection()

function defineConnection () {
  Connection.encodingLength = encodingLength
  Connection.encode = encode
  Connection.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.connection_id)) {
      var len = encodings.string.encodingLength(obj.connection_id)
      length += 1 + len
    }
    if (defined(obj.company_id)) {
      var len = encodings.int32.encodingLength(obj.company_id)
      length += 1 + len
    }
    if (defined(obj.dns_name)) {
      var len = encodings.string.encodingLength(obj.dns_name)
      length += 1 + len
    }
    if (defined(obj.ipv4)) {
      var len = encodings.string.encodingLength(obj.ipv4)
      length += 1 + len
    }
    if (defined(obj.ipv6)) {
      var len = encodings.string.encodingLength(obj.ipv6)
      length += 1 + len
    }
    if (defined(obj.service_type)) {
      var len = encodings.enum.encodingLength(obj.service_type)
      length += 1 + len
    }
    if (defined(obj.username)) {
      var len = encodings.string.encodingLength(obj.username)
      length += 1 + len
    }
    if (defined(obj.broker_owner_id)) {
      var len = encodings.string.encodingLength(obj.broker_owner_id)
      length += 1 + len
    }
    if (defined(obj.workstation_name)) {
      var len = encodings.string.encodingLength(obj.workstation_name)
      length += 1 + len
    }
    if (defined(obj.machine_fingerprint)) {
      var len = encodings.string.encodingLength(obj.machine_fingerprint)
      length += 1 + len
    }
    if (defined(obj.channel_id)) {
      var len = encodings.string.encodingLength(obj.channel_id)
      length += 1 + len
    }
    if (defined(obj.channe_type)) {
      var len = encodings.enum.encodingLength(obj.channe_type)
      length += 1 + len
    }
    if (defined(obj.license_key)) {
      var len = encodings.string.encodingLength(obj.license_key)
      length += 1 + len
    }
    if (defined(obj.is_cloud)) {
      var len = encodings.bool.encodingLength(obj.is_cloud)
      length += 1 + len
    }
    if (defined(obj.app_version)) {
      var len = encodings.string.encodingLength(obj.app_version)
      length += 1 + len
    }
    if (defined(obj.last_updated_utc)) {
      var len = encodings.int64.encodingLength(obj.last_updated_utc)
      length += 2 + len
    }
    if (defined(obj.created_utc)) {
      var len = encodings.int64.encodingLength(obj.created_utc)
      length += 2 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.connection_id)) {
      buf[offset++] = 10
      encodings.string.encode(obj.connection_id, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.company_id)) {
      buf[offset++] = 16
      encodings.int32.encode(obj.company_id, buf, offset)
      offset += encodings.int32.encode.bytes
    }
    if (defined(obj.dns_name)) {
      buf[offset++] = 26
      encodings.string.encode(obj.dns_name, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.ipv4)) {
      buf[offset++] = 34
      encodings.string.encode(obj.ipv4, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.ipv6)) {
      buf[offset++] = 42
      encodings.string.encode(obj.ipv6, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.service_type)) {
      buf[offset++] = 48
      encodings.enum.encode(obj.service_type, buf, offset)
      offset += encodings.enum.encode.bytes
    }
    if (defined(obj.username)) {
      buf[offset++] = 58
      encodings.string.encode(obj.username, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.broker_owner_id)) {
      buf[offset++] = 66
      encodings.string.encode(obj.broker_owner_id, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.workstation_name)) {
      buf[offset++] = 74
      encodings.string.encode(obj.workstation_name, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.machine_fingerprint)) {
      buf[offset++] = 82
      encodings.string.encode(obj.machine_fingerprint, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.channel_id)) {
      buf[offset++] = 90
      encodings.string.encode(obj.channel_id, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.channe_type)) {
      buf[offset++] = 96
      encodings.enum.encode(obj.channe_type, buf, offset)
      offset += encodings.enum.encode.bytes
    }
    if (defined(obj.license_key)) {
      buf[offset++] = 106
      encodings.string.encode(obj.license_key, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.is_cloud)) {
      buf[offset++] = 112
      encodings.bool.encode(obj.is_cloud, buf, offset)
      offset += encodings.bool.encode.bytes
    }
    if (defined(obj.app_version)) {
      buf[offset++] = 122
      encodings.string.encode(obj.app_version, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.last_updated_utc)) {
      buf[offset++] = 128
      buf[offset++] = 1
      encodings.int64.encode(obj.last_updated_utc, buf, offset)
      offset += encodings.int64.encode.bytes
    }
    if (defined(obj.created_utc)) {
      buf[offset++] = 136
      buf[offset++] = 1
      encodings.int64.encode(obj.created_utc, buf, offset)
      offset += encodings.int64.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      connection_id: "",
      company_id: 0,
      dns_name: "",
      ipv4: "",
      ipv6: "",
      service_type: 0,
      username: "",
      broker_owner_id: "",
      workstation_name: "",
      machine_fingerprint: "",
      channel_id: "",
      channe_type: 0,
      license_key: "",
      is_cloud: false,
      app_version: "",
      last_updated_utc: 0,
      created_utc: 0
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.connection_id = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 2:
        obj.company_id = encodings.int32.decode(buf, offset)
        offset += encodings.int32.decode.bytes
        break
        case 3:
        obj.dns_name = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 4:
        obj.ipv4 = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 5:
        obj.ipv6 = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 6:
        obj.service_type = encodings.enum.decode(buf, offset)
        offset += encodings.enum.decode.bytes
        break
        case 7:
        obj.username = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 8:
        obj.broker_owner_id = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 9:
        obj.workstation_name = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 10:
        obj.machine_fingerprint = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 11:
        obj.channel_id = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 12:
        obj.channe_type = encodings.enum.decode(buf, offset)
        offset += encodings.enum.decode.bytes
        break
        case 13:
        obj.license_key = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 14:
        obj.is_cloud = encodings.bool.decode(buf, offset)
        offset += encodings.bool.decode.bytes
        break
        case 15:
        obj.app_version = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 16:
        obj.last_updated_utc = encodings.int64.decode(buf, offset)
        offset += encodings.int64.decode.bytes
        break
        case 17:
        obj.created_utc = encodings.int64.decode(buf, offset)
        offset += encodings.int64.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
